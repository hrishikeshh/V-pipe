from snakemake.io import load_configfile


# setup workflow
def load_config(path):
    config = load_configfile(path)
    return config


module indels:
    snakefile:
        "../../../workflow/Snakefile"
    config:
        load_config("config_indels/config.yaml")
    replace_prefix:
        {"results/": "results/indels/", "resources/": "resources/indels/"}


use rule * from indels as indels_*


module varyvilocaparams:
    snakefile:
        "../../../workflow/Snakefile"
    config:
        load_config("config_varyvilocaparams/config.yaml")
    replace_prefix:
        {
            "results/": "results/varyvilocaparams/",
            "resources/": "resources/varyvilocaparams/",
        }


use rule * from varyvilocaparams as varyvilocaparams_*


module distance:
    snakefile:
        "../../../workflow/Snakefile"
    config:
        load_config("config_distance/config.yaml")
    replace_prefix:
        {"results/": "results/distance/", "resources/": "resources/distance/"}


use rule * from distance as distance_*


module realdata:
    snakefile:
        "../../../workflow/Snakefile"
    config:
        load_config("config_realdata/config.yaml")
    replace_prefix:
        {"results/": "results/realdata/", "resources/": "resources/realdata/"}


use rule * from realdata as realdata_*


# define required output files
rule all:
    input:
        "results/indels/performance_measures/local/",
        "results/varyvilocaparams/performance_measures/local/",
        "results/varyvilocaparams/performance_measures/global/",
        "results/distance/performance_measures/global/",
        "results/distance/performance_measures/local/",
        "results/realdata/performance_measures/local/",
        "results/realdata/performance_measures/global/",
        "results/realdata/performance_measures/performance_Two_strain_SARS-CoV-2.csv",
    default_target: True


# indels rules
use rule run_method_local from indels as indels_run_method_local_global with:
    output:
        fname_result_haplos=f"results/indels/method_runs/{indels.paramspace.wildcard_pattern}/{{method}}/replicates/{{replicate}}/haplotypes_.fasta",
        fname_result=f"results/indels/method_runs/{indels.paramspace.wildcard_pattern}/{{method}}/replicates/{{replicate}}/snvs_.vcf",
        dname_work=directory(
            f"results/indels/method_runs/{indels.paramspace.wildcard_pattern}/{{method}}/replicates/{{replicate}}/work/"
        ),
        fname_status=touch(
            f"results/indels/method_runs/{indels.paramspace.wildcard_pattern}/{{method,{'|'.join(['markertoavoidemptyregex'] + indels.method_list)}}}/replicates/{{replicate}}/status_.txt"
        ),
    params:
        script_path=lambda wildcards, input: input.script,
    benchmark:
        f"results/indels/method_runs/{indels.paramspace.wildcard_pattern}/{{method,{'|'.join(['markertoavoidemptyregex'] + indels.method_list)}}}/replicates/{{replicate}}/benchmark_.tsv"
    threads: 32  # threads cannot be allocated in resources.
    resources:
        mem_mb=60024,
        runtime=400,


use rule performance_measures_local from indels as indels_performance_measures_local with:
    input:
        vcf_list=[
            f"results/indels/method_runs/{params}/{method}/replicates/{replicate}/snvs_.vcf"
            for params in indels.paramspace.instance_patterns
            for method in indels.method_list
            for replicate in range(indels.config["replicate_count"])
        ],
        # we also include `method_list_local` to align with `vcf_list`
        groundtruth_list=[
            f"results/indels/simulated_reads/{params}/replicates/{replicate}/ground_truth.csv"
            for params in indels.paramspace.instance_patterns
            for method in indels.method_list
            for replicate in range(indels.config["replicate_count"])
        ],
        benchmark_list=[
            f"results/indels/method_runs/{params}/{method}/replicates/{replicate}/benchmark_.tsv"
            for params in indels.paramspace.instance_patterns
            for method in indels.method_list
            for replicate in range(indels.config["replicate_count"])
        ],
        haplostats_list=[
            f"results/indels/haplo_stats/{params}/replicates/{replicate}/haplotypes_stats.csv"
            for params in indels.paramspace.instance_patterns
            for replicate in range(indels.config["replicate_count"])
        ],


# distance rules
use rule run_method_local from varyvilocaparams as varyvilocaparams_run_method_local_global with:
    output:
        fname_result_haplos=f"results/varyvilocaparams/method_runs/{varyvilocaparams.paramspace.wildcard_pattern}/{{method}}/replicates/{{replicate}}/haplotypes_.fasta",
        fname_result=f"results/varyvilocaparams/method_runs/{varyvilocaparams.paramspace.wildcard_pattern}/{{method}}/replicates/{{replicate}}/snvs_.vcf",
        dname_work=directory(
            f"results/varyvilocaparams/method_runs/{varyvilocaparams.paramspace.wildcard_pattern}/{{method}}/replicates/{{replicate}}/work/"
        ),
        fname_status=touch(
            f"results/varyvilocaparams/method_runs/{varyvilocaparams.paramspace.wildcard_pattern}/{{method,{'|'.join(['markertoavoidemptyregex'] + varyvilocaparams.method_list)}}}/replicates/{{replicate}}/status_.txt"
        ),
    params:
        script_path=lambda wildcards, input: input.script,
    benchmark:
        f"results/varyvilocaparams/method_runs/{varyvilocaparams.paramspace.wildcard_pattern}/{{method,{'|'.join(['markertoavoidemptyregex'] + varyvilocaparams.method_list)}}}/replicates/{{replicate}}/benchmark_.tsv"
    threads: 10
    resources:
        mem_mb=20024,
        runtime=240, # 10 days


use rule performance_measures_local from varyvilocaparams as varyvilocaparams_performance_measures_local with:
    input:
        vcf_list=[
            f"results/varyvilocaparams/method_runs/{params}/{method}/replicates/{replicate}/snvs_.vcf"
            for params in varyvilocaparams.paramspace.instance_patterns
            for method in varyvilocaparams.method_list
            for replicate in range(varyvilocaparams.config["replicate_count"])
        ],
        # we also include `method_list_local` to align with `vcf_list`
        groundtruth_list=[
            f"results/varyvilocaparams/simulated_reads/{params}/replicates/{replicate}/ground_truth.csv"
            for params in varyvilocaparams.paramspace.instance_patterns
            for method in varyvilocaparams.method_list
            for replicate in range(varyvilocaparams.config["replicate_count"])
        ],
        benchmark_list=[
            f"results/varyvilocaparams/method_runs/{params}/{method}/replicates/{replicate}/benchmark_.tsv"
            for params in varyvilocaparams.paramspace.instance_patterns
            for method in varyvilocaparams.method_list
            for replicate in range(varyvilocaparams.config["replicate_count"])
        ],
        haplostats_list=[
            f"results/varyvilocaparams/haplo_stats/{params}/replicates/{replicate}/haplotypes_stats.csv"
            for params in varyvilocaparams.paramspace.instance_patterns
            for replicate in range(varyvilocaparams.config["replicate_count"])
        ],


use rule performance_measures_global from varyvilocaparams as varyvilocaparams_performance_measures_global with:
    input:
        predicted_haplos_list=[
            f"results/varyvilocaparams/method_runs/{params}/{method}/replicates/{replicate}/haplotypes_.fasta"
            for params in varyvilocaparams.paramspace.instance_patterns
            for method in varyvilocaparams.method_list_global
            for replicate in range(varyvilocaparams.config["replicate_count"])
        ],
        true_haplos_list=[
            f"results/varyvilocaparams/simulated_reads/{params}/replicates/{replicate}/haplotypes.fasta"
            for params in varyvilocaparams.paramspace.instance_patterns
            for replicate in range(varyvilocaparams.config["replicate_count"])
        ],
        haplostats_list=[
            f"results/varyvilocaparams/haplo_stats/{params}/replicates/{replicate}/haplotypes_stats.csv"
            for params in varyvilocaparams.paramspace.instance_patterns
            for replicate in range(varyvilocaparams.config["replicate_count"])
        ],
        runstatus_list=[
            f"results/varyvilocaparams/method_runs/{params}/{method}/replicates/{replicate}/status_.txt"
            for params in varyvilocaparams.paramspace.instance_patterns
            for method in varyvilocaparams.method_list_global
            for replicate in range(varyvilocaparams.config["replicate_count"])
        ],
        benchmark_list=[
            f"results/varyvilocaparams/method_runs/{params}/{method}/replicates/{replicate}/benchmark_.tsv"
            for params in varyvilocaparams.paramspace.instance_patterns
            for method in varyvilocaparams.method_list_global
            for replicate in range(varyvilocaparams.config["replicate_count"])
        ],
    params:
        method_list_global=varyvilocaparams.method_list_global,
        quast=False,


realdata_sarscov2_params = [
    params
    for params in realdata.paramspace.instance_patterns
    if params.split("read_length~")[1].split("__")[0] == "Two-strain-SARS-CoV-2"
]


use rule performance_measures_local_realdata_sarscov2 from realdata as realdata_performance_measures_local_realdata_sarscov2 with:
    input:
        vcf_list=[
            f"results/realdata/method_runs/{params}/{method}/replicates/{replicate}/snvs_.vcf"
            for params in realdata_sarscov2_params
            for method in realdata.method_list
            if method not in ["cliquesnv_local_haplo", "cliquesnv_local_haplo_tf0.01"]
            for replicate in range(realdata.config["replicate_count"])
        ],
        # we also include `method_list_local` to align with `vcf_list`
        groundtruth_list=[
            f"results/realdata/simulated_reads/{params}/replicates/{replicate}/ground_truth.csv"
            for params in realdata_sarscov2_params
            for method in realdata.method_list
            if method not in ["cliquesnv_local_haplo", "cliquesnv_local_haplo_tf0.01"]
            for replicate in range(realdata.config["replicate_count"])
        ],
    output:
        fname_out=f"results/realdata/performance_measures/performance_Two_strain_SARS-CoV-2.csv",
    wildcard_constraints:
        read_length="Two-strain-SARS-CoV-2",


# distance rules
use rule run_method_local from distance as distance_run_method_local_global with:
    output:
        fname_result_haplos=f"results/distance/method_runs/{distance.paramspace.wildcard_pattern}/{{method}}/replicates/{{replicate}}/haplotypes_.fasta",
        fname_result=f"results/distance/method_runs/{distance.paramspace.wildcard_pattern}/{{method}}/replicates/{{replicate}}/snvs_.vcf",
        dname_work=directory(
            f"results/distance/method_runs/{distance.paramspace.wildcard_pattern}/{{method}}/replicates/{{replicate}}/work/"
        ),
        fname_status=touch(
            f"results/distance/method_runs/{distance.paramspace.wildcard_pattern}/{{method,{'|'.join(['markertoavoidemptyregex'] + distance.method_list)}}}/replicates/{{replicate}}/status_.txt"
        ),
    params:
        script_path=lambda wildcards, input: input.script,
    benchmark:
        f"results/distance/method_runs/{distance.paramspace.wildcard_pattern}/{{method,{'|'.join(['markertoavoidemptyregex'] + distance.method_list)}}}/replicates/{{replicate}}/benchmark_.tsv"
    threads: 30
    resources:
        mem_mb=60024,
        runtime=10*24*60,


use rule performance_measures_local from distance as distance_performance_measures_local with:
    input:
        vcf_list=[
            f"results/distance/method_runs/{params}/{method}/replicates/{replicate}/snvs_.vcf"
            for params in distance.paramspace.instance_patterns
            for method in distance.method_list
            if method not in ["cliquesnv_local_haplo", "cliquesnv_local_haplo_tf0.01"]
            for replicate in range(distance.config["replicate_count"])
        ],
        # we also include `method_list_local` to align with `vcf_list`
        groundtruth_list=[
            f"results/distance/simulated_reads/{params}/replicates/{replicate}/ground_truth.csv"
            for params in distance.paramspace.instance_patterns
            for method in distance.method_list
            if method not in ["cliquesnv_local_haplo", "cliquesnv_local_haplo_tf0.01"]
            for replicate in range(distance.config["replicate_count"])
        ],
        benchmark_list=[
            f"results/distance/method_runs/{params}/{method}/replicates/{replicate}/benchmark_.tsv"
            for params in distance.paramspace.instance_patterns
            for method in distance.method_list
            if method not in ["cliquesnv_local_haplo", "cliquesnv_local_haplo_tf0.01"]
            for replicate in range(distance.config["replicate_count"])
        ],
        haplostats_list=[
            f"results/distance/haplo_stats/{params}/replicates/{replicate}/haplotypes_stats.csv"
            for params in distance.paramspace.instance_patterns
            for replicate in range(distance.config["replicate_count"])
        ],


use rule performance_measures_global from distance as distance_performance_measures_global with:
    input:
        predicted_haplos_list=[
            f"results/distance/method_runs/{params}/{method}/replicates/{replicate}/haplotypes_.fasta"
            for params in distance.paramspace.instance_patterns
            for method in distance.method_list_global
            for replicate in range(distance.config["replicate_count"])
        ],
        true_haplos_list=[
            f"results/distance/simulated_reads/{params}/replicates/{replicate}/haplotypes.fasta"
            for params in distance.paramspace.instance_patterns
            for replicate in range(distance.config["replicate_count"])
        ],
        haplostats_list=[
            f"results/distance/haplo_stats/{params}/replicates/{replicate}/haplotypes_stats.csv"
            for params in distance.paramspace.instance_patterns
            for replicate in range(distance.config["replicate_count"])
        ],
        runstatus_list=[
            f"results/distance/method_runs/{params}/{method}/replicates/{replicate}/status_.txt"
            for params in distance.paramspace.instance_patterns
            for method in distance.method_list_global
            for replicate in range(distance.config["replicate_count"])
        ],
        benchmark_list=[
            f"results/distance/method_runs/{params}/{method}/replicates/{replicate}/benchmark_.tsv"
            for params in distance.paramspace.instance_patterns
            for method in distance.method_list_global
            for replicate in range(distance.config["replicate_count"])
        ],
    params:
        method_list_global=distance.method_list_global,
        quast=False,


# real data rules
use rule run_method_local from realdata as realdata_run_method_local_global with:
    output:
        fname_result_haplos=f"results/realdata/method_runs/{realdata.paramspace.wildcard_pattern}/{{method}}/replicates/{{replicate}}/haplotypes_.fasta",
        fname_result=f"results/realdata/method_runs/{realdata.paramspace.wildcard_pattern}/{{method}}/replicates/{{replicate}}/snvs_.vcf",
        dname_work=directory(
            f"results/realdata/method_runs/{realdata.paramspace.wildcard_pattern}/{{method}}/replicates/{{replicate}}/work/"
        ),
        fname_status=touch(
            f"results/realdata/method_runs/{realdata.paramspace.wildcard_pattern}/{{method,{'|'.join(['markertoavoidemptyregex'] + realdata.method_list)}}}/replicates/{{replicate}}/status_.txt"
        ),
    params:
        script_path=lambda wildcards, input: input.script,
        quast=False,
    benchmark:
        f"results/realdata/method_runs/{realdata.paramspace.wildcard_pattern}/{{method,{'|'.join(['markertoavoidemptyregex'] + realdata.method_list)}}}/replicates/{{replicate}}/benchmark_.tsv"
    threads: 30
    resources:
        mem_mb=60024,
        runtime=15*24*60,


use rule performance_measures_local from realdata as realdata_performance_measures_local with:
    input:
        vcf_list=[
            f"results/realdata/method_runs/{params}/{method}/replicates/{replicate}/snvs_.vcf"
            for params in realdata.paramspace.instance_patterns
            for method in realdata.method_list_local + realdata.method_list_global
            if method not in ["cliquesnv_local_haplo", "cliquesnv_local_haplo_tf0.01"]
            for replicate in range(realdata.config["replicate_count"])
        ],
        # we also include `method_list_local` to align with `vcf_list`
        groundtruth_list=[
            f"results/realdata/simulated_reads/{params}/replicates/{replicate}/ground_truth.csv"
            for params in realdata.paramspace.instance_patterns
            for method in realdata.method_list_local + realdata.method_list_global
            if method not in ["cliquesnv_local_haplo", "cliquesnv_local_haplo_tf0.01"]
            for replicate in range(realdata.config["replicate_count"])
        ],
        benchmark_list=[
            f"results/realdata/method_runs/{params}/{method}/replicates/{replicate}/benchmark_.tsv"
            for params in realdata.paramspace.instance_patterns
            for method in realdata.method_list_local + realdata.method_list_global
            if method not in ["cliquesnv_local_haplo", "cliquesnv_local_haplo_tf0.01"]
            for replicate in range(realdata.config["replicate_count"])
        ],


use rule performance_measures_global from realdata as realdata_performance_measures_global with:
    input:
        predicted_haplos_list=[
            f"results/realdata/method_runs/{params}/{method}/replicates/{replicate}/haplotypes_.fasta"
            for params in realdata.paramspace.instance_patterns
            if params
            == "seq_tech~pacbio__seq_mode~amplicon__seq_mode_param~real_data__read_length~Ten_strain_IAV__genome_size~NA__coverage~2300__haplos~NA"
            for method in realdata.method_list_global
            for replicate in range(realdata.config["replicate_count"])
        ],
        true_haplos_list=[
            f"results/realdata/simulated_reads/{params}/replicates/{replicate}/haplotypes.fasta"
            for params in realdata.paramspace.instance_patterns
            if params
            == "seq_tech~pacbio__seq_mode~amplicon__seq_mode_param~real_data__read_length~Ten_strain_IAV__genome_size~NA__coverage~2300__haplos~NA"
            for replicate in range(realdata.config["replicate_count"])
        ],
        haplostats_list=[
            f"results/realdata/haplo_stats/{params}/replicates/{replicate}/haplotypes_stats.csv"
            for params in realdata.paramspace.instance_patterns
            if params
            == "seq_tech~pacbio__seq_mode~amplicon__seq_mode_param~real_data__read_length~Ten_strain_IAV__genome_size~NA__coverage~2300__haplos~NA"
            for replicate in range(realdata.config["replicate_count"])
        ],
        runstatus_list=[
            f"results/realdata/method_runs/{params}/{method}/replicates/{replicate}/status_.txt"
            for params in realdata.paramspace.instance_patterns
            if params
            == "seq_tech~pacbio__seq_mode~amplicon__seq_mode_param~real_data__read_length~Ten_strain_IAV__genome_size~NA__coverage~2300__haplos~NA"
            for method in realdata.method_list_global
            for replicate in range(realdata.config["replicate_count"])
        ],
        benchmark_list=[
            f"results/realdata/method_runs/{params}/{method}/replicates/{replicate}/benchmark_.tsv"
            for params in realdata.paramspace.instance_patterns
            if params
            == "seq_tech~pacbio__seq_mode~amplicon__seq_mode_param~real_data__read_length~Ten_strain_IAV__genome_size~NA__coverage~2300__haplos~NA"
            for method in realdata.method_list_global
            for replicate in range(realdata.config["replicate_count"])
        ],
    params:
        method_list_global=realdata.method_list_global,
        quast=False,
